
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import END, Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def pos():
    Pos()
    

class Pos(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.data = {"name": StringVar(), "orders": StringVar(), "total_price": StringVar(), "cash": StringVar(), "change": StringVar()}


        self.button_clicked = False
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 470,
            width = 1001,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            1001.0,
            470.0,
            fill="#1E2431",
            outline="")

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn1'),
            relief="flat"
        )
        button_1.place(
            x=13.0,
            y=7.0,
            width=144.0,
            height=133.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn2'),
            relief="flat"
        )
        button_2.place(
            x=13.0,
            y=241.0,
            width=144.0,
            height=135.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            self,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn3'),
            relief="flat"
        )
        button_3.place(
            x=172.0,
            y=7.0,
            width=147.0,
            height=133.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_4 = Button(
            self,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn4'),
            relief="flat"
        )
        button_4.place(
            x=172.0,
            y=241.0,
            width=147.0,
            height=135.0
        )

        self.button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_5 = Button(
            self,
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn5'),
            relief="flat"
        )
        button_5.place(
            x=329.0,
            y=7.0,
            width=150.0,
            height=133.0
        )

        self.button_image_6 = PhotoImage(
            file=relative_to_assets("button_6.png"))
        button_6 = Button(
            self,
            image=self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn6'),
            relief="flat"
        )
        button_6.place(
            x=329.0,
            y=241.0,
            width=145.0,
            height=136.0
        )

        self.button_image_7 = PhotoImage(
            file=relative_to_assets("button_7.png"))
        button_7 = Button(
            self,
            image=self.button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn7'),
            relief="flat"
        )
        button_7.place(
            x=487.0,
            y=7.0,
            width=152.0,
            height=137.0
        )

        self.button_image_8 = PhotoImage(
            file=relative_to_assets("button_8.png"))
        button_8 = Button(
            self,
            image=self.button_image_8,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn8'),
            relief="flat"
        )
        button_8.place(
            x=492.0,
            y=241.0,
            width=147.0,
            height=135.0
        )

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            493.0,
            226.0,
            image=self.image_image_1
        )

   

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = self.canvas.create_image(
            748.0,
            379.5,
            image=entry_image_1
        )
  

        self.button_image_9 = PhotoImage(
            file=relative_to_assets("button_9.png"))
        button_9 = Button(
            self,
            image=self.button_image_9,
            borderwidth=0,
            highlightthickness=0,
            command=self.save,
            relief="flat"
        )
        button_9.place(
            x=762.0,
            y=403.0,
            width=99.0,
            height=27.0
        )
        
        
        self.entry_4 = Text(
            self,
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_4.place(
            x=384.0,
            y=333.0,
            width=0,
            height=0,
        )
        
        
        self.entry_1 = Entry(
            self,
            textvariable=self.data['cash'],
            bd=0,
            bg="#2A2F3A",
            fg="#FFFFFF",
            highlightthickness=0
        )
        self.entry_1.place(
            x=696.0,
            y=371.0,
            width=104.0,
            height=15.0
        )

        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = self.canvas.create_image(
            902.5,
            379.5,
            image=entry_image_2
        )
        self.entry_2 = Entry(
            self,
            textvariable=self.data['change'],
            bd=0,
            bg="#2A2F3A",
            fg="#FFFFFF",
            highlightthickness=0
        )
        self.entry_2.place(
            x=895,
            y=371.0,
            width=63.0,
            height=15.0
        )
        
        self.entry_1.bind('<KeyRelease>', self.calculate_change)
        
        
    
        self.vape_info = []
        self.which_btn = None
        self.text_objects = {}
        self.customer_name = 0
        

        
    def whichButtonClicked(self, name):  
        self.which_btn = name
        self.buttonClicked()

    def buttonClicked(self):
      
        
        # Mapping button identifiers to their respective coffee functions
        vape_info_functions = {
            'btn1': self.dotmod_dotstick_revo_v1,
            'btn2': self.dotmod_dotaio_v2_lite,
            'btn3': self.dotmod_dotstick_revo,
            'btn4': self.dotmod_dotbox,
            'btn5': self.dotmod_switch_r,
            'btn6': self.dotmod_dotpod_s,
            'btn7': self.dotmod_dotaio_v2,
            'btn8': self.dotmod_dotaio,
        }

        if self.which_btn in vape_info_functions:
            p_name, qty, price = vape_info_functions[self.which_btn]()
            
            # Check if the coffee is already in the list
            found = False
            for item in self.vape_info:
                if item[0] == p_name:
                    # Increment quantity and price
                    item[1] += qty
                    item[2] += price
                    found = True
                    break

            if not found:
                # Add new entry to coffee_info
                self.vape_info.append([p_name, qty, price])

            self.display_vape_info()
        else:
            print('error')    
        
        
    def display_vape_info(self):
        x_positions = [667.0, 837.0, 888.0]
        y_position = 89.0
        
        total_price = 0
        ordered_data = ''
        
        for i, item in enumerate(self.vape_info):
           p_name = item[0]
           qty_text = f"{item[1]}"
           price_text =f"{item[2]}"
           total_price += item[2]
           ordered_data += f"{p_name}: {qty_text}, {price_text},"
           
           
           if p_name in self.text_objects:

                self.canvas.itemconfigure(self.text_objects[p_name]['qty'], text=qty_text)
                self.canvas.itemconfigure(self.text_objects[p_name]['price'], text=price_text)
           else:
                name_text = self.canvas.create_text(
                    x_positions[0],
                    y_position,
                    anchor="nw",
                    text=p_name,
                    fill="#FFFFFF",
                    font=("Lato Regular", 12 * -1)
                )

                qty_text_obj = self.canvas.create_text(
                    x_positions[1],
                    y_position,
                    anchor="nw",
                    text=qty_text,
                    fill="#FFFFFF",
                   font=("Lato Regular", 12 * -1)
                )

                price_text_obj = self.canvas.create_text(
                    x_positions[2],
                    y_position,
                    anchor="nw",
                    text=price_text,
                    fill="#FFFFFF",
                    font=("Lato Regular", 12 * -1)
                )
        
                self.text_objects[p_name] = {'name': name_text, 'qty': qty_text_obj, 'price': price_text_obj}
        
           y_position += 29
           
        self.entry_4.delete(1.0, END)  # Clear previous content
        self.entry_4.insert(END, ordered_data)
        
        self.total_price_text = f"₱{total_price}"
        if 'total_price' in self.text_objects:
            self.canvas.itemconfigure(self.text_objects['total_price'], text=self.total_price_text)
        else:
            total_price_obj = self.canvas.create_text(
                884.0,
                341.0,
                anchor="nw",
                text=self.total_price_text,
                fill="#FFFFFF",
                font=("Lato Regular", 12 * -1)
            )
            self.text_objects['total_price'] = total_price_obj

        self.data["total_price"].set(total_price)
        
        
    def calculate_change(self, event):
        total_price_text = self.canvas.itemcget(self.text_objects['total_price'], 'text')
        # Extract the numeric value from the total price text (assuming it starts with '₱')
        total_price = int(total_price_text[1:])
        
        cash = int(self.data["cash"].get())
        
        change = cash - total_price
        
        self.data["change"].set(change)     

    def save(self):
        self.customer_name += 1

        formatted_customer_name = f"Customer {self.customer_name}"
        self.data['name'].set(formatted_customer_name)
        
        order_value = self.entry_4.get("1.0", END)  # Corrected get() call
        self.data["orders"].set(order_value)
        change = int(self.data["change"].get())
        if change < 0:
            messagebox.showinfo("Error", "Change should be less than 0")
            return
        else:
            for val in self.data.values():
                if val.get() == "":
                
                    messagebox.showinfo("Error", "Please fill in all the fields")
                    return
                

            
            result = db_controller.add_order(
                *[self.data[label].get() for label in ("name", "orders", "total_price","cash","change")]
            )
            
            print(result)
            if result:
                messagebox.showinfo("Success", "Order added successfully")
                self.clear_displayed_data()
                for label in self.data.keys():
                    self.data[label].set('')
            else:
                messagebox.showerror(
                    "Error", "Unable to add order. Please make sure the data is validated"
                )
            
            
    def clear_displayed_data(self):
        # Remove text objects from the canvas
        for p_name, text_object in self.text_objects.items():
            # Ensure that text_object is a dictionary
            if isinstance(text_object, dict):
                self.canvas.delete(text_object['name'])
                self.canvas.delete(text_object['qty'])
                self.canvas.delete(text_object['price'])

         # Remove total price text object if it exists
        if 'total_price' in self.text_objects:
            total_price_obj = self.text_objects['total_price']
            self.canvas.delete(total_price_obj)     
                
        
        # Clear text object references
        self.text_objects = {}

        # Clear coffee info list
        self.vape_info = []       
            
            

        
    def dotmod_dotstick_revo_v1(self):
        p_name = 'DOTMOD-DS REVO V1.5'
        qty = 1
        price = 3000
        
        return p_name,qty,price
    
    def dotmod_dotstick_revo(self):
        p_name = 'DOTMOD-DOTSTICK REVO'
        qty = 1
        price = 3000
        
        return p_name,qty,price
    
    def dotmod_switch_r(self):
        p_name = 'DOTMOD SWITCH R'
        qty = 1
        price = 888
        
        return p_name,qty,price
    
    def dotmod_dotaio_v2(self):
        p_name = 'DOTMOD - DOTAIO V2'
        qty = 1
        price = 6500
        
        return p_name,qty,price
    
    def dotmod_dotaio_v2_lite(self):
        p_name = 'DOTMOD - DOTAIO V2 LITE'
        qty = 1
        price = 5300
        
        return p_name,qty,price
    
    def dotmod_dotaio(self):
        p_name = 'DOTMOD - DOTAIO'
        qty = 1
        price = 4990
        
        return p_name,qty,price
    
    def dotmod_dotbox(self):
        p_name = 'DOTMOD - DOTBOX 75W'
        qty = 1
        price = 4900
        
        return p_name,qty,price
    
    def dotmod_dotpod_s(self):
        p_name = 'DOTMOD - DOTPOD-S'
        qty = 1
        price = 2100
        
        return p_name,qty,price
        